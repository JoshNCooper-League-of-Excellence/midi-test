module std {
  extern fn read(__fd: s32, __buf: *mut void, __nbytes: u64) -> s64;
  extern fn write(__fd: s32, __buf: *const void, __n: u64) -> s64;
  extern fn open(__file: *const u8, __oflag: s32, __mode: s32) -> s32;
  extern fn close(__fd: s32) -> s32;
}
import pthread::*;

const O_RDWR:   s32 = 0x2;
const S_IRUSR: s32 = 0x100;
const S_IWUSR: s32 = 0x80;

const MIDI_NOTE_OFF := 0x80;
const MIDI_NOTE_ON := 0x90;

type MidiCallback :: fn(s32, s32, s32, *mut void) -> bool;

const note_names: [str; 12] = .[
  "C",
  "Db",
  "D",
  "Eb",
  "E",
  "F",
  "F#",
  "G",
  "Ab",
  "A",
  "Bb",
  "B",
];

fn pitch_from_midi_note_id(note_id: s32) -> f32 {
  return 440.0 * math::pow(2.0, (note_id as f32 - 69.0) / 12.0);
}

fn midi_note_printer_callback(status: s32, note_id: s32, velocity: s32) -> bool {
  status_string: str = if status == MIDI_NOTE_OFF {
    return "released";
  } else if status == MIDI_NOTE_ON{
    return "pressed";
  } else {
    return "NULL";
  }
  if status_string == "NULL" {
    std::printf("(? = 0x%x) v=%d\n", status, velocity);
    return true;
  }
  using note_name := fmt::format("%%", (note_names[note_id % 12], note_id / 12 - 1), fmt::FormatOptions.{});
  fmt::printlnf("% % v=%", (note_name, status_string, velocity, fmt::FormatOptions.{}));
  return true;
}

// All of these status codes assume channel 0.
enum MidiStatus {
  NoteOff = 0x80,    
  NoteOn = 0x90,
  PitchBend = 0xE0,
}