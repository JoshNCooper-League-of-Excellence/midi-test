import map::*;
import midi::*;
struct Voice;
struct InstrumentParameters;

type SampleGenerator :: fn(*mut Voice, *mut InstrumentParameters) -> f32;

struct Envelope {

  attack:  f32  = 0.001,
  decay:   f32  = 1,
  sustain: f32  = 1,
  release: f32  = 0.001,
  state:   u32,
  value:   f32  = 0,
}

const ENVELOPE_STATE_ATTACK   := 0;
const ENVELOPE_STATE_DECAY    := 1;
const ENVELOPE_STATE_SUSTAIN  := 2;
const ENVELOPE_STATE_RELEASE  := 3;
const ENVELOPE_STATE_INACTIVE := 4;

impl Envelope {
  fn apply(*mut self, sample_rate: f32) {
    if self.state == ENVELOPE_STATE_ATTACK {
      self.value += 1.0 / (self.attack * sample_rate);
      if self.value >= 1.0 {
        self.value = 1.0;
        self.state = ENVELOPE_STATE_DECAY;
      }
    } else if self.state == ENVELOPE_STATE_DECAY {
      self.value -= (1.0 - self.sustain) / (self.decay * sample_rate);
      if self.value <= self.sustain {
        self.value = self.sustain;
        self.state = ENVELOPE_STATE_SUSTAIN;
      }
    } else if self.state == ENVELOPE_STATE_RELEASE {
      self.value -= self.sustain / (self.release * sample_rate);
      if self.value <= 0.0 {
        self.value = 0.0;
        self.state = ENVELOPE_STATE_INACTIVE;
      }
    }
  }
}

struct Voice {
  id: s32, // ! Never change this value!! it will only cause bad things and no fun effects!!
  freq: f32,
  velocity: f32,
  phase: f32,
  phase_step: f32,
  envelope: Envelope,
  generator: SampleGenerator,
  user_arg: *mut void, // typically a '*mut dyn Instrument', but without out of order compilation we can't figure out a way to get that to work without type erasure.
}

// TODO: add a bunch of CC crap here.
struct InstrumentParameters {
  pitch_bend: f32 = 1.0,
  mod: f32 = 0.0
}

trait Instrument {
  // This gets called after 'generate_new_voice' so you can leave the default voice generation, and still customize.
  fn set_voice_parameters(*mut self, freq: f32, voice: *mut Voice) {
    voice.generator = fn(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 { // basic sine generator.
      voice.phase += voice.phase_step * (1 + parameters.pitch_bend);
      if voice.phase > 2.0 * 3.14159265 {
        voice.phase -= 2.0 * 3.14159265;
      }
      phase := voice.phase;
      sample := voice.velocity * voice.envelope.value * math::cos(phase) as f32;
      return sample;
    };
  }

  // this is the root of all the voices for your instruments. for most basic polyphonic/monophonic synths, this does the trick.
  fn generate_new_voice(*mut self, freq: f32, velocity_normalized: f32, phase_step: f32) -> Voice {
    return .{
      velocity: velocity_normalized,
      freq: freq,
      phase_step: phase_step,
      user_arg: self,
    };
  }

  fn handle_midi_event(*mut self, status: s32, arg0: s32, arg1: s32, sample_rate: f32) {
    // TODO: instead of calling the various methods liek generate_new_voice and set_voice_parameters,
    // this should all be one method where the user _could_ put many voices per note pressed, or whatever.
    // the on note released will almost never change (I think, except some custom strange situations)
    // but we can also have a "callback" style situation where the user can override a default or fulfill an
    // implementation for that too.
    note, velocity := (arg0, arg1);
    if status == MidiStatus::NoteOn && velocity > 0 { // On note pressed.
      freq: f32 = pitch_from_midi_note_id(note);
      phase_step := 1.0 * 3.14159265 * freq / sample_rate;
      mut voice: Voice = self.generate_new_voice(freq, velocity as f32 / 127.0, phase_step);
      voice.id = note; // ! Never change this ID. see the definition.
      self.set_voice_parameters(freq, &mut voice);
      self.voices.push(voice);
    } else if (status == MidiStatus::NoteOff) || (status == MidiStatus::NoteOn && velocity == 0) { // On note release.
      freq: f32 = pitch_from_midi_note_id(note);
      for voice in self.voices.iter_mut() {
        if voice.id == note {
          voice.envelope.state = 3;
        }
      }
    }

    if status == MidiStatus::PitchBend {
      unscaled_value: f32 = (arg0 | (arg1 << 7));
      mut normalized_value := (unscaled_value - 8192.0) / s16::max_value() as f32;
      self.parameters.pitch_bend = normalized_value + 1;
    }
  }

  fn initialize(*mut self) -> bool {
    return true;
  }

  fn get_active_voices(*mut self) -> mut [Voice] {
    return self.voices.as_slice_mut();
  }

  fn apply_envelopes(*mut self, sample_rate: f32) {
    for voice in self.get_active_voices().iter_mut() {
      voice.envelope.apply(sample_rate);
    }    
  }

  fn mix_voices(*mut self, out: mut [f32], sample_rate: u32) {
    for i in 0..out.length {
      mut sum := 0.0;
      mut active := 0;
      for voice in self.get_active_voices().iter_mut() {
        if voice.envelope.state != ENVELOPE_STATE_INACTIVE {
          sum += voice.generator(voice, &mut self.parameters);
          active += 1;
        }
      }
      if active > 0 {
        out.data![i] += sum;
      }
    }
    self.voices.retain(fn (voice: *Voice) -> bool {
      return voice.envelope.state != 4;
    });
  }
}

trait Effect {
  fn init(*mut self);
  fn process(*mut self, mut data: mut [f32]);
}