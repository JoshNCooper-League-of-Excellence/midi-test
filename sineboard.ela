import jst::*;
import map::*;

struct SineBoard {
  voices: List!<Voice>,
  envelope: Envelope = .{
    attack: 0.001,
    release: 0.001,
  },
  parameters: InstrumentParameters,
}

// basic sine oscillator / sample generator.
fn sine_generator(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 {
  voice.phase += voice.phase_step * parameters.pitch_bend;
  if voice.phase > 2.0 * 3.14159265 {
    voice.phase -= 2.0 * 3.14159265;
  }
  phase := voice.phase;
  sample := voice.velocity * voice.envelope * math::cos(phase) as f32;
  return sample;
}

fn fm_generator(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 {
  f := sine_generator(voice, parameters);
  m := sine_generator(voice, parameters);
  mod_index: f32 = f * math::atan2(f, m) - 1;
  carrier_phase := voice.phase + mod_index * m;
  sample := voice.velocity * voice.envelope * math::cos(carrier_phase) as f32;
  return sample;
}

impl Instrument for SineBoard {
  fn set_voice_parameters(*mut self, freq: f32, voice: *mut Voice) {
    voice.generator = &mut fm_generator;
  }
}
