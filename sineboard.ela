import jst::*;

struct SineBoard;
fn fm_generator(voice: *mut Voice) -> f32 {
  f := sine_generator(voice);
  m := sine_generator(voice);
  mod_index: f32 = f * math::atan2(f, m) - 1;
  carrier_phase := voice.phase + mod_index * m;
  sample := voice.velocity * voice.envelope * math::cos(carrier_phase) as f32;
  instrument: *mut SineBoard = voice.user_arg;
  return sample;
}

struct SineBoard {
  voices: List!<Voice>,
  envelope: Envelope = .{
    attack: 0.001,
    release: 0.001,
  },
  pitch_bend: f32,
}

impl Instrument for SineBoard {
  fn set_voice_parameters(*mut self, freq: f32, voice: *mut Voice) {
    if freq < 130 {
      voice.generator = &mut sine_generator;
      voice.phase_step *= 2;
    } else {
      voice.generator = &mut fm_generator;
    }
  }
}
