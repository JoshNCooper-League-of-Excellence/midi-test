import jst::*;
import map::*;

extern fn pow(base: f64, exponent: f64) -> f64;

struct SineBoard {
  voices: List!<Voice>,
  envelope: Envelope = .{
    attack: 0.001,
    release: 0.001,
  },
  parameters: InstrumentParameters,
}

// basic sine oscillator / sample generator.
fn sine_generator(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 {
  voice.phase += voice.phase_step * parameters.pitch_bend;
  if voice.phase > 2.0 * 3.14159265 {
    voice.phase -= 2.0 * 3.14159265;
  }
  phase := voice.phase;
  return  voice.velocity * voice.envelope * math::cos(phase) as f32;
}

fn sawtooth_generator(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 {
  voice.phase += voice.phase_step * parameters.pitch_bend;
  if voice.phase > 2.0 * 3.14159265 {
    voice.phase -= 2.0 * 3.14159265;
  }
  // Sawtooth wave ranges from -1 to 1 over one period
  phase := voice.phase;
  sample := 2.0 * (phase / (2.0 * 3.14159265)) - 1.0;
  return voice.velocity * voice.envelope * sample as f32;
}


fn fm_generator(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 {
  f := sine_generator(voice, parameters);
  m := sine_generator(voice, parameters);
  mod_index: f32 = f * math::atan2(f, m) - 1;
  carrier_phase := voice.phase + mod_index * m;
  mut sample := voice.velocity * voice.envelope * math::cos(carrier_phase) as f32;
  sample *= math::sin(carrier_phase);
  return sample;
}

impl Instrument for SineBoard {
  fn set_voice_parameters(*mut self, freq: f32, voice: *mut Voice) {
    voice.generator = &mut sawtooth_generator;
    // voice.generator = fn(voice: *mut Voice, parameters: *mut InstrumentParameters) -> f32 {
    //   f := fm_generator(voice, parameters);
    //   m := fm_generator(voice, parameters) * math::asin(f * 2);
    //   mod_index: f32 = f * math::atan2(f, m) * 2;
    //   carrier_phase := voice.phase + mod_index * m;
    //   sample := voice.velocity * voice.envelope * math::cos(carrier_phase) as f32;
    //   return sample;
    // };
  }
}

const ECHO_BUFFER_INITIAL_LENGTH: s32 = 48000;

struct Echo {
  buffer: List!<f32>,
  index: s32 = 0,
  delay_samples: s32 = 36000,
  depth: f32 = 0.5,
  repetitions: s32 = 4,
}

impl Effect for Echo {
  fn init(*mut self) {
    self.buffer.initialize(self.delay_samples * self.repetitions);
  }
  fn process(*mut self, mut data: mut [f32]) {
    for i in 0..data.length {
      mut out := data[i];
      for n in 1..self.repetitions + 1 {
        tap_delay := self.delay_samples * n;
        tap_idx := (self.index + self.buffer.length - tap_delay) % self.buffer.length;
        tap := self.buffer[tap_idx];
        out += tap * pow(self.depth as f64, n as f64);
      }
      self.buffer[self.index] = data[i];
      data[i] = out;
      self.index = (self.index + 1) % self.buffer.length;
    }
  }
}
struct Chorus {
  buffer: List!<f32>,
  index: s32 = 0,
  delay_samples: s32 = 1000,
  depth: f32 = 100,
  freq: f32 = 0.5,
  phase: f32 = 0,
}

impl Effect for Chorus {
  fn init(*mut self) {
    self.buffer.initialize(self.delay_samples + self.depth);
  }
  fn process(*mut self, mut data: mut [f32]) {
    phase_step := 1.0 * 3.14159265 * self.freq / 44100.0;
    for i in 0..data.length {
      self.phase += phase_step;
      if self.phase > 2.0 * 3.14159265 {
        self.phase -= 2.0 * 3.14159265;
      }
      difference := math::cos(self.phase) as f32 * self.depth;
      mut out := data[i];
      sample_idx := (self.index + self.delay_samples + difference as s32) % self.buffer.length;
      sample := self.buffer[sample_idx];
      out += sample;
      self.buffer[self.index] = data[i];
      data[i] = out;
      self.index = (self.index + 1) % self.buffer.length;
    }
  }
}