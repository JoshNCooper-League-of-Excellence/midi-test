extern fn snd_pcm_open(handle: *mut *mut void, name: *const u8, stream: s32, mode: s32) -> s32;
extern fn snd_pcm_set_params(handle: *mut void, format: s32, access: s32, channels: u32, rate: u32, soft_resample: s32, latency: u32) -> s32;
extern fn snd_pcm_writei(handle: *mut void, buffer: *const void, size: s32) -> s32;
extern fn snd_pcm_close(handle: *mut void) -> s32;
extern fn snd_pcm_prepare(handle: *mut void) -> s32;

const SND_PCM_STREAM_PLAYBACK: s32 = 0;
const SND_PCM_FORMAT_FLOAT_LE: s32 = 14;
const SND_PCM_ACCESS_RW_INTERLEAVED: s32 = 3;

const BLOCK_SIZE: s32 = 128;
const OUTPUT_GAIN: f32 = 0.2;

#c_flags " -lasound "

import fmt::*;
import midi::*;
import math;
import pthread::*;
import jst::{
  Instrument,
  Effect
};
import fs::Directory;
import sineboard::*;

struct Context {
  instruments: List!<dyn Instrument>,
  effects: List!<dyn Effect>,
  pcm: *mut void,
  sample_rate: u32,
  audio_thread: Thread,
  midi_thread: Thread,
}

impl Context {
  fn init_pcm(*mut self, sample_rate: u32) -> bool {
    if snd_pcm_open(&mut self.pcm, "default"c, SND_PCM_STREAM_PLAYBACK, 0) != 0 {
      fmt::println("Failed to open ALSA device");
      return false;
    }
    self.sample_rate = sample_rate;
    snd_pcm_set_params(self.pcm, SND_PCM_FORMAT_FLOAT_LE, SND_PCM_ACCESS_RW_INTERLEAVED, 1, sample_rate, 1, 30_000);
    return true;
  }
}

impl Destroy for Context {
  fn destroy(*mut self, recursive: bool = true) {
    self.instruments.destroy(recursive);
    if self.pcm != null {
      snd_pcm_close(self.pcm);
      self.pcm = null;
    }
  }
}

fn master_mix(context: *mut Context, mut data: mut [f32]) {
  for instrument in context.instruments.iter_mut() {
    instrument.apply_envelopes(context.sample_rate);
    instrument.mix_voices(data, context.sample_rate);
  }
  
  for effect in context.effects.iter_mut() {
    effect.process(data);
  }
  
  for i in 0..data.length {
    data[i] *= OUTPUT_GAIN;
  }
}

fn audio_thread_main(arg: *mut void) {
  context: *mut Context = arg;
  while true {
    mut buffer: [f32; BLOCK_SIZE];
    master_mix(context, .{
      data: buffer as *mut f32,
      length: BLOCK_SIZE,
    });
    mut written: s32;
    if (written = snd_pcm_writei(context.pcm, buffer, BLOCK_SIZE)) < 0 {
      snd_pcm_prepare(context.pcm); 
      fmt::printlnf("ALSA write error: %", (written,), FormatOptions.{});
    }
  }
}

fn on_midi_event(status: s32, note: s32, velocity: s32, user_arg: *mut void) -> bool {
  context: *mut Context = user_arg;
  for instrument in context.instruments.iter_mut() {
    instrument.handle_midi_event(status, note, velocity, context.sample_rate);
  }
  return true;
}

fn on_init(user_arg: *mut void) -> bool {
  context: *mut Context = user_arg;
  for instrument in context.instruments {
    if !instrument.initialize() {
      fmt::println("failed to initialize instrument");
    }
  }
  return true;
}

fn start_midi_thread(context: *mut Context, mut device: str, init_callback: fn(*mut void) -> bool, midi_callback: MidiCallback, user_arg: *mut void) -> Thread {
  return Thread::start(fn (arg: *mut void) {
    callbacks: *mut (MidiCallback, fn(*mut void) -> bool, *mut void, str) = arg;
    midi_callback, init_callback, user_arg, device := *callbacks;
    mut fd := 0;
    if (fd = std::open(device.data, O_RDWR, S_IRUSR | S_IWUSR)) == -1 {
      std::printf("failed to open midi device\n");
      return;
    }
    defer std::close(fd);
    if !init_callback(user_arg) {
      return;
    }

    const N_VOICES := 12;
    const N_BYTES := N_VOICES * 3;
    mut buf: [u8; N_BYTES];
    mut bytes_read := 0;
    while (bytes_read = std::read(fd, buf, N_BYTES)) != -1 {
      for idx in 0..(bytes_read/3) {
        midi_note_printer_callback(buf[idx+0] & 0xF0, buf[idx+1], buf[idx+2]);
        midi_callback(buf[idx+0] & 0xF0, buf[idx+1], buf[idx+2], user_arg);
      }
    }
  }, &mut (midi_callback, init_callback, user_arg, device));
}

fn get_midi_device_name() -> String {
  mut dir: Directory = if Directory::open("/dev/snd") is Option!<Directory>::Some(dir) {
    return dir;
  } else {
    panic("Unable to open /dev/snd");
  };

  mut i := 1;
  using mut midi_devices: List!<String>;
  for entry in dir.entries {
    if entry.starts_with("midi") {
      midi_devices.push(entry);
      printlnf("(%) %", (i, entry));
    }
  }

  if midi_devices.length == 0 {
    panic("No midi devices found");
  }

  mut selection: s32 = 1;
  if midi_devices.length > 1 {
    println("Select midi device and press enter");
    while true {
      if std::c::scanf("%d"c, &selection) != 1 || selection > midi_devices.length || selection <= 0 {
        println("Selection invalid, try again");
      } else {
        break;
      }
    }
  } else {
    println("Auto selected the only device available");
  }
  return midi_devices[selection - 1];
}

fn init_audio_engine() -> Result!<Context, str> {
  mut ctx: Context;
  if !ctx.init_pcm(44100) {
    return Result!<Context, str>::Err("Failed to init pcm");
  }
  
  mut sine_board: SineBoard;
  ctx.instruments.push(dynof(&mut sine_board, Instrument));

  mut echo: Echo;
  ctx.effects.push(dynof(&mut echo, Effect));
  echo.init();

  using midi_device_file := fmt::format("/dev/snd/%", (get_midi_device_name(),), FormatOptions.{});
  ctx.audio_thread = Thread::start(&mut audio_thread_main, &mut ctx);
  ctx.midi_thread = midi::start_midi_thread(&mut ctx, midi_device_file.as_str(), &mut on_init, &mut on_midi_event, &mut ctx);
  return Result!<Context, str>::Ok(ctx);
}

